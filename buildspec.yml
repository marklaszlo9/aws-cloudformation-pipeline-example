---
version: 0.2
phases:
  install:
    runtime-versions:
      python: 3.x
    commands:
      - echo Entered the install phase...
      - gem install cfn-nag
  pre_build:
    commands:
      - echo Entered the pre_build phase....
      - echo Current directory is $CODEBUILD_SRC_DIR
      - export dirname=${PWD##*/}
      - echo Directory name $dirname
      - echo Installing Taskcat using pip3...
      - pip3 install cfn-lint taskcat
      - echo Verifying Taskcat installation...
      - taskcat -v
      - echo "Configuring taskcat..."
      - |
        cat << EOF > ~/.taskcat.yml
        general:
          s3_regional_buckets: true
        EOF
      - echo Configuring aws cli...
      - aws configure set default.region eu-west-1
  build:
    commands:
      - echo Entered the build phase...
      - echo run linting...
      - cfn-lint templates/*
      - cfn-lint templates/* > cfn_lint_output.log
      - |
        if $(grep -Fq "E" cfn_lint_output.log)
        then
          echo Linting FAILED!
          exit 1
        else
          echo Linting Passed!
          exit 0
        fi
      - echo run CFN-Nag to pinpoint security problems
      - cfn_nag_scan --input-path  templates/*
      - cfn_nag_scan --input-path  templates/* > cfn_nag_scan_output.log
      - mkdir report || echo "dir report exists"
      - SCAN_RESULT=$(cfn_nag_scan --fail-on-warnings --input-path  templates/*
        -o json > ./report/cfn_nag.out.json && echo OK || echo FAILED)
      - echo Completed cfn scanning `date`
      - echo Generating report 
      - |
        source_repository=${!CODEBUILD_SRC_DIR##*/} jq  \
        "{ \"messageType\": \"CodeScanReport\", \"reportType\": \"CFN-NAG\", \
        \"createdAt\": env.date, \"source_repository\": env.source_repository, \
        \"source_branch\": env.CODEBUILD_SOURCE_VERSION, \
        \"build_id\": env.CODEBUILD_BUILD_ID, \
        \"source_commitid\": env.CODEBUILD_RESOLVED_SOURCE_VERSION, \
        \"report\": . }" ./report/cfn_nag.out.json > payload.json
      - if [[ "$FAIL_BUILD" = "true" && "$SCAN_RESULT" = "FAILED" ]]; then
        printf "\n\nFailiing pipeline as possible insecure configurations were
        detected\n\n" && exit 1; fi
      - echo run Taskcat tests...
      - taskcat test run --minimal-output --lint-disable
      - |
        if $(grep -Fq "CREATE_FAILED" taskcat_outputs/index.html)
        then
          echo "Build failed!"
          exit 1
        else
          echo "Build passed!"
          exit 0
        fi
    finally:
      - ls -1 taskcat_outputs
      - ls -1 taskcat_outputs | while read LOG; do cat taskcat_outputs/$LOG; done
      - "echo \"Zipping and uploading report to S3 bucket:
        '$ARTIFACT_BUCKET'...\""
      - zip -r taskcat_report.zip taskcat_outputs
      - aws s3 cp taskcat_report.zip
        s3://$ARTIFACT_BUCKET/taskcat_reports/$CODEBUILD_BUILD_ID.zip
  post_build:
    commands:
      - echo Build completed on `date`
version: 0.2
phases:
  install:      
    commands:
      - export date=`date +%Y-%m-%dT%H:%M:%S.%NZ`
      - echo Installing cloudformation-guard
      - yum install glibc-devel gcc git make jq -y
      - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - git clone https://github.com/aws-cloudformation/cloudformation-guard.git --depth 1 /usr/local/cloudformation-guard
      - source $HOME/.cargo/env
      - (cd /usr/local/cloudformation-guard && make )
      - export PATH=$PATH:/usr/local/cloudformation-guard/bin/
  build:
    commands:
      - echo Starting cfn-guard scanning `date` in `pwd`
      - RULESET_PATH=/usr/local/cloudformation-guard/Examples/security_rules.ruleset
      - mkdir report || echo "dir report exists"
      - echo Generating report 
      - find . -name "*.json" -or -name "*.yaml" > report/iterator
      - echo "[]" > report/final_report.json
      - SCAN_RESULT="OK"
      - |
       while read -r template
        do
          cfn-guard check --rule_set $RULESET_PATH --template  "$template" > ./report/template_report
          if [ $? -ne 0 ]; then SCAN_RESULT="FAILED"; fi
          if [ ! -s ./report/template_report ]; then
            rm ./report/template_report
          else
            jq -R "{ \"file\": \"$template\", \"message\" : select( . | contains(\"Number of failures\") | not ) } " ./report/template_report | jq -s . > ./report/template_report.json
            jq -s ' . | add' ./report/final_report.json ./report/template_report.json > ./report/new_report.json
            mv ./report/new_report.json ./report/final_report.json 
          fi
        done < report/iterator
      - echo Completed cfn-guard scanning `date`
      - | 
        source_repository=${!CODEBUILD_SRC_DIR##*/} jq  \
        "{ \"messageType\": \"CodeScanReport\", \"reportType\": \"CFN-GUARD\", \
        \"createdAt\": env.date, \"source_repository\": env.source_repository, \
        \"source_branch\": env.CODEBUILD_SOURCE_VERSION, \
        \"build_id\": env.CODEBUILD_BUILD_ID, \
        \"source_commitid\": env.CODEBUILD_RESOLVED_SOURCE_VERSION, \
        \"report\": . }" ./report/final_report.json > payload.json
      - if [[ "$FAIL_BUILD" = "true" && "$SCAN_RESULT" = "FAILED" ]]; then printf "\n\nFailiing pipeline as possible insecure configurations were detected\n\n" && exit 1; fi
reports:
  SecurityReports:
    files:
      - report/junit_scan_report.xml
    discard-paths: yes
    file-format: JunitXml
artifacts:
  files:
    - taskcat_outputs/*
  name: taskcat-report
